import{A as e}from"../nitro/nitro.mjs";import{E as t,v as o,K as r}from"./server.mjs";import{u as a}from"./asyncData.mjs";function useRequestFetch(){var e;return(null==(e=function(e){var o;return e||(e=t()),null==(o=e.ssrContext)?void 0:o.event}())?void 0:e.$fetch)||globalThis.$fetch}function useFetch(t,n,s){const[u={},i]="string"==typeof n?[{},n]:[n,s],l=o.computed((()=>o.toValue(t))),c=u.key||e([i,"string"==typeof l.value?l.value:"",...generateOptionSegments(u)]);if(!c||"string"!=typeof c)throw new TypeError("[nuxt] [useFetch] key must be a string: "+c);if(!t)throw new Error("[nuxt] [useFetch] request is missing.");const f=c===i?"$f"+c:c;if(!u.baseURL&&"string"==typeof l.value&&"/"===l.value[0]&&"/"===l.value[1])throw new Error('[nuxt] [useFetch] the request URL must not start with "//".');const{server:h,lazy:m,default:p,transform:d,pick:v,watch:b,immediate:g,getCachedData:y,deep:w,dedupe:E,...R}=u,V=o.reactive({...r,...R,cache:"boolean"==typeof u.cache?void 0:u.cache}),q={server:h,lazy:m,default:p,transform:d,pick:v,immediate:g,getCachedData:y,deep:w,dedupe:E,watch:!1===b?[]:[V,l,...b||[]]};let x;return a(f,(()=>{var e;null==(e=null==x?void 0:x.abort)||e.call(x,new DOMException("Request aborted as another request to the same endpoint was initiated.","AbortError")),x="undefined"!=typeof AbortController?new AbortController:{};const t=o.toValue(u.timeout);let r;t&&(r=setTimeout((()=>x.abort(new DOMException("Request aborted due to timeout.","AbortError"))),t),x.signal.onabort=()=>clearTimeout(r));let a=u.$fetch||globalThis.$fetch;if(!u.$fetch){"string"==typeof l.value&&"/"===l.value[0]&&(!o.toValue(u.baseURL)||"/"===o.toValue(u.baseURL)[0])&&(a=useRequestFetch())}return a(l.value,{signal:x.signal,...V}).finally((()=>{clearTimeout(r)}))}),q)}function generateOptionSegments(e){var t;const r=[(null==(t=o.toValue(e.method))?void 0:t.toUpperCase())||"GET",o.toValue(e.baseURL)];for(const t of[e.params||e.query]){const e=o.toValue(t);if(!e)continue;const a={};for(const[t,r]of Object.entries(e))a[o.toValue(t)]=o.toValue(r);r.push(a)}return r}export{useFetch as u};
//# sourceMappingURL=fetch.mjs.map
